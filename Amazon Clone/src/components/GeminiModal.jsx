import { GoogleGenerativeAI } from "@google/generative-ai";
import { X } from "lucide-react";
import { useEffect, useState } from "react";
import { createPortal } from "react-dom";
import { toast } from "react-toastify";

const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_APIKEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

const GeminiModal = ({ product, isOpen, setIsOpen }) => {
   const prompt = `You are a product description expert tasked with creating a compelling and informative description for the following product based on the provided JSON data. The description should highlight key features, benefits, and reasons why this product is a great deal. Use the JSON data below to craft a medium-length description that includes:
   - Product Information: Briefly describe the product and its purpose.
   - Usage: Explain where and how the product can be used.
   - Why Itâ€™s the Best Deal: Highlight pricing, discounts, and any special offers.
   - Additional Perks: Mention Prime eligibility, Amazon Choice status, delivery options, and sales volume.
   - Call to Action: Encourage the user to consider purchasing the product.
   
   Here is the JSON data for the product in JSON.stringify() format:
   ${JSON.stringify(product)}

   Instructions for the Description:
   - Use a professional yet engaging tone.
   - Ensure the description is concise but covers all key points.
   - Include a subtle call to action at the end.
   - Avoid exaggeration and stick to the facts provided in the JSON data.
   `;
   const [loading, setLoading] = useState(false);
   const [productSummary, setProductSummary] = useState(product.product_title);

   const generateSummary = async () => {
      setLoading(true);
      const result = await model.generateContent(prompt);

      if (!result) {
         toast.error("Error generating the summary");
         setLoading(false);
         setIsOpen(false);
         return;
      }

      setProductSummary(result.response.text());
      setLoading(false);
   };

   useEffect(() => {
      generateSummary();
   }, []);

   const render = () =>
      isOpen && (
         <div
            className="w-screen h-screen bg-[rgba(255,255,255,0.4)] flex items-center justify-center fixed top-0 left-0 z-10"
            onClick={() => setIsOpen(false)}
         >
            <div
               className="w-1/2 relative border border-slate-200 p-10 flex items-center justify-center gap-2 flex-col rounded-lg shadow-md bg-white overflow-hidden"
               onClick={(e) => e.stopPropagation()}
            >
               <h1 className="text-4xl font-bold text-center">
                  Product Summary generated by GeminiAI 1.5 Flash
               </h1>
               <button
                  onClick={() => setIsOpen(false)}
                  className="absolute top-2 right-2 cursor-pointer"
               >
                  <X className="w-5" />
               </button>
               <span className="text-xs text-blue-500 text-center underline">
                  {product.product_title}
               </span>
               {loading ? <span>Thinking..</span> : <div>{productSummary}</div>}
            </div>
         </div>
      );

   return createPortal(render(), document.getElementById("gemini-modal"));
};

export default GeminiModal;
